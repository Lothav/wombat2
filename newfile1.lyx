#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{babel}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding iso8859-15
\fontencoding T1
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Trabalho Prático Software Básico
\end_layout

\begin_layout Date
05/10/2015
\end_layout

\begin_layout Author
Rafael Rubbioli Ferreira - Ana Luisa Rodrigues - Luiz Otavio
\end_layout

\begin_layout Part*
Introdução
\end_layout

\begin_layout Quotation
Este trabalho tem o objetivo de implementar um montador de dois passos para
 a máquina Wombat2, como foi visto em sala de aula.
 A partir de um arquivo texto como entrada, a função do montador será transforma
r esse programa escrito na linguagem Assembly para um programa em linguagem
 de máquina.
 Para isso, ele deve ser capaz de interpretar o conjunto de 27 instruções
 fornecidas na documentação, de forma eficiente.
 O trabalho foi implementado na linguagem C++.
\end_layout

\begin_layout Part*
Desenvolvimento
\end_layout

\begin_layout Quote
O montador será capaz de interpretar estruções com o seguinte formato:
\end_layout

\begin_deeper
\begin_layout Quote

\series bold
_[rótulo:] operador [operando(s)] [;comentário]
\end_layout

\end_deeper
\begin_layout Quote
A instrução deve ter um operador e a quantidade de operandos depende da
 instrução, podendo ter nenhum, um ou dois.
 Caso haja mais de um, eles devem ser separados por uma vírgula.
 A instrução pode conter um rótulo (label) que deve ser inicializado com
 com um underscore 
\begin_inset Quotes eld
\end_inset

_
\begin_inset Quotes erd
\end_inset

 que será responsável por identificar a posição de memória da instrução
 em questão.
 Os comentários são opcionais e devem começar com 
\begin_inset Quotes eld
\end_inset

;
\begin_inset Quotes erd
\end_inset

.
 A seguir um exemplo de instrução:
\end_layout

\begin_deeper
\begin_layout Quote
_loop: add R0 R1 ;teste
\end_layout

\end_deeper
\begin_layout Quote
Para o tratamento de referências antecipadas, o montador deve realizar duas
 passadas pelo código, podendo assim realizar a tradução do programa.
 Na primeira passada, são tratados dois eventos.
 O primeiro evento a ser tratado são os desvios.
 Quando ocorre um desvio no código o montador deve transformar os lables
 dos desvios em endereços de PC.
 Para resolver isso, é criada uma tabela para mapear os desvios com seus
 devidos valores de PC.
 O segundo evento a ser tratado são as alocações de memória no final do
 código.
 Para resolver isso, foi criada mais uma tabela.
 Essa tabela irá alocar na memória um número de bytes e dar valor à eles.
 Dessa forma, quando a segunda passada começar, os valores de todos os símbolos
 já serão conhecidos, não restando nenhuma referência antecipada e cada
 declaração poderá ser lida, montada e produzida com seu respectivo valor
 e endereço de memória.
 
\end_layout

\begin_layout Quote
A pseudo-instrução .data tem a função de reservar uma região da memória da
 máquina.
 Seu formato será:
\end_layout

\begin_deeper
\begin_layout Quote

\series bold
label: .data num_bytes valor_inicial
\end_layout

\end_deeper
\begin_layout Quote
portanto, ela alocará uma região de tamanho num_bytes com um valor_inicial.
 Essa região poderá ser identificada ao longo do código pelo rótulo label,
 podendo ser acessada a qualquer momento durante sua execução.
 Abaixo temos um exemplo da utilização dessa pseudo-instrução:
\end_layout

\begin_deeper
\begin_layout Quote
wombat: .data 2 0
\end_layout

\end_deeper
\begin_layout Quote
Neste caso, o nome da instrução é 
\begin_inset Quotes eld
\end_inset

wombat
\begin_inset Quotes erd
\end_inset

, tem um tamanho de 2 bytes e começa com valor inicial 0.
\end_layout

\begin_layout Quote
Na implemetação deste trabalho prático, as variáveis são alocadas na posição
 mais baixa da memória (0 em diante).
 A cada definição de variável encontrada é inserida uma entrada na tabela
 de variáveis com o nome e a posição referente à essa variável.
 A seguir é mostrado um programa escrito em linguagem de montagem e a tabela
 de variáveis criada: 
\end_layout

\begin_layout LyX-Code
...
\end_layout

\begin_layout LyX-Code
wombat .data 2 0 ;pseudo-instrucao de 2 bytes com valor inicial 0
\end_layout

\begin_layout LyX-Code
...
\end_layout

\begin_layout LyX-Code
move R0 R1
\end_layout

\begin_layout LyX-Code
wombat2 .data 3 1 ;pseudo-instrucao de 3 bytes com valor inicial 1
\end_layout

\begin_layout LyX-Code
_loop: add R0 R1
\end_layout

\begin_layout LyX-Code
...
\end_layout

\begin_layout LyX-Code
exit
\end_layout

\begin_layout Quote
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Variável
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Endereço
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wombat
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wombat2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 
\end_layout

\begin_layout Quote
Na segunda passada, 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\end_body
\end_document
